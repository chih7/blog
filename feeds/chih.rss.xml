<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>chih's blog - chih</title><link>https://blog.chih.me/</link><description></description><lastBuildDate>Tue, 31 Jan 2017 00:00:00 +0800</lastBuildDate><item><title>Energy measurements in Linux</title><link>https://blog.chih.me/read-cpu-power-with-RAPL.html</link><description>&lt;h2&gt;Energy measurements in Linux&lt;/h2&gt;
&lt;h3&gt;RAPL&lt;/h3&gt;
&lt;p&gt;RAPL provides a set of counters providing energy and power consumption information. RAPL is not an analog power meter, but rather uses a software power model. This software power model estimates energy usage by using hardware performance counters and I/O models. Based on our …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Tue, 31 Jan 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2017-01-31:/read-cpu-power-with-RAPL.html</guid><category>linux</category><category>intel</category><category>CPU</category><category>power</category><category>kernel</category><category>rapl</category></item><item><title>Ubuntu 16.04 下 CPU 频率与功耗关系</title><link>https://blog.chih.me/power-with-different-cpufreq.html</link><description>&lt;h3&gt;硬件环境&lt;/h3&gt;
&lt;p&gt;实验服务器搭载两颗 Intel E5645 处理器，24块 SAS+SATA 机械硬盘。E5645 为 6 核处理器，并支持超线程技术（Intel® Hyper-Threading Technology），服务器共 24 个逻辑核，基本时钟频率为 2.40 GHz 。&lt;/p&gt;
&lt;h3&gt;软件环境&lt;/h3&gt;
&lt;p&gt;Ubuntu Server 16.04.1 LTS&lt;/p&gt;
&lt;h2&gt;CPU 频率驱动程序与工具&lt;/h2&gt;
&lt;p&gt;操作系统通过CPU调频可以根据负载动态调节CPU工作频率，达到省电的目的。这个过程可以自动进行，也可以由用户空间(userspace)程序手动调节。Linux 内核实现了CPU 调频，该驱动被称为 CPUfreq， 从 3.4 内核开始，内核会自动载入相应的内核模块，默认的频率调频器 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Sun, 25 Dec 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2016-12-25:/power-with-different-cpufreq.html</guid><category>linux</category><category>cpufreq</category><category>CPU</category><category>power</category></item><item><title>使用redsocks把shadowsocks转为全局代理</title><link>https://blog.chih.me/global-proxy-within-redsocks-and-shadowsocks.html</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;shadowsocks是个非常棒的翻墙代理，它可以在本地提供一个socks5端口供软件使用代理。比如启动chrome的时候加上&lt;code&gt;--proxy-server="socks5://myproxy:1080"&lt;/code&gt;这条参数就可以让chrome走代理；然而，有些软件不支持设置代理的功能。所以有时候，我们需要一个全局代理的环境，使用VPN是一个通常的选择，不过一般购买的VPN的速度不如shadowsocks，同时，VPN更容易受到GFW的干扰。为什么不把正在使用的shadowsocks利用起来作为一个全局代理呢？&lt;/p&gt;
&lt;p&gt;本文介绍了一种利用&lt;a href="https://github.com/darkk/redsocks"&gt;redsocks&lt;/a&gt;与iptables实现全局代理的方法，其基本原理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;iptables的规则将所有tcp包转发到redsocks打开的本地端口&lt;/li&gt;
&lt;li&gt;redsocks接收tcp包并转发给shadowsocks打开的本地socks端口&lt;/li&gt;
&lt;li&gt;shadowsocks将接收的包转发给远端的代理服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于使用了redsocks与iptables，因此本文的方法仅适用于Linux。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;由于使用的是Arch Linux，我直接通过AUR安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yaourt redsocks
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过&lt;code&gt;yaourt&lt;/code&gt;搜索redsocks包，然后选择你要安装的包的序号就可以进行安装了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：下文中的配置文件的路径全部基于Arch Linux，如果你用的不是Arch Linux，请根据自己的情况更改。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其他发行版可以通过各自的包管理器或者下载源码&lt;a href="https://github.com/darkk/redsocks/blob/master/README"&gt;安装&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;h3&gt;配置redsocks&lt;/h3&gt;
&lt;p&gt;我在包提供的原有配置的基础上进行了一些修改，主要是把 &lt;code&gt;redsocks …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Mon, 21 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2016-11-21:/global-proxy-within-redsocks-and-shadowsocks.html</guid><category>Arch Linux</category><category>Linux</category><category>redsocks</category><category>iptables</category><category>shadowsocks</category><category>代理</category></item><item><title>使用LuCI的RPC接口修改openwrt配置</title><link>https://blog.chih.me/chang-openwtr-ppoe-password.html</link><description>&lt;p&gt;简单来说，本文整理了一些&lt;code&gt;openwrt&lt;/code&gt;的RPC接口，用来自动修改pppoe的密码，并重启网络。为什么要弄这些玩意呢，因为浙江高校中普遍使用的蛋疼的闪讯——两三天换个动态密码，时不时给你断个网！使用这些API的是一个Android应用，它在用户按下一个按键后自动向电信发送一条获取密码的短信，然后获取返回的短信，解析其中的闪讯动态密码，通过&lt;code&gt;openwrt&lt;/code&gt;的RPC接口修改密码并重启网络，这样，只需要一次按按钮的操作，就能恢复网络，又可以愉快的玩耍啦。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/openwrt/openwrt"&gt;openwrt&lt;/a&gt; 我就不多介绍了，玩路由器的都知道；&lt;a href="https://wiki.openwrt.org/doc/techref/uci"&gt;UCI&lt;/a&gt;是&lt;code&gt;openwrt&lt;/code&gt;提供的一套统一的配置接口，可以用以配置整台&lt;code&gt;openwrt&lt;/code&gt;设备；而&lt;a href="https://wiki.openwrt.org/doc/techref/luci"&gt;LuCI&lt;/a&gt;是一个基于Lua语言开发的、包装了底层UCI接口的易于使用的Web用户接口。LuCI也提供了一种基于JSON格式的RPC机制来访问其内部的库。&lt;/p&gt;
&lt;p&gt;LuCI的RPC接口的地址为 &lt;strong&gt;/cgi-bin/luci/rpc/LIBRARY&lt;/strong&gt;，其中LIBRARY代表按功能区分的几个库，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;auth&lt;/strong&gt; - 基于token的认证库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uci&lt;/strong&gt; - UCI统一配置接口的映射&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fs&lt;/strong&gt; -  文件操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sys …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Mon, 17 Oct 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2016-10-17:/chang-openwtr-ppoe-password.html</guid><category>linux</category><category>openwrt</category><category>android</category><category>luci</category><category>rpc</category></item><item><title>使用Python求解分隙ALOHA最大效率</title><link>https://blog.chih.me/use-SymPy-get-max-effectiveness-of-ALOHA.html</link><description>&lt;p&gt;SymPy是一个符号计算的Python库，SymPy支持符号计算、高精度计算、模式匹配、绘图、解方程、微积分、组合数学、离散数学、几何学、概率与统计、物理学等方面的功能。下面我将基于它求解以下两个问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当有N个活跃节点的时候，分隙ALOHA的效率为 &lt;span class="math"&gt;\(N p (1 - p)^{N - 1}\)&lt;/span&gt; ，找出使这个表达式最大化的&lt;code&gt;p&lt;/code&gt;值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用 &lt;code&gt;1&lt;/code&gt; 中的p值，计算当 &lt;code&gt;N&lt;/code&gt; 趋近于无穷时分隙ALOHA的效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先导入sympy库，方便起见，导入了所有内容。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在SymPy中，数学符号是Symbol类的对象，要明确声明符号变量，我们新建了&lt;code&gt;N&lt;/code&gt;与&lt;code&gt;p&lt;/code&gt;符号 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Sat, 08 Oct 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2016-10-08:/use-SymPy-get-max-effectiveness-of-ALOHA.html</guid><category>Python</category><category>SymPy</category><category>ALOHA</category><category>math</category></item><item><title>无题</title><link>https://blog.chih.me/64.html</link><description>&lt;p&gt;“鲜活的生命，悄无声息地消失。他们的死，既不壮烈，也不浪漫，当时无人知晓，今后或许也不会再被提起。但只要仍有人记得，他们的死便并非毫无意义。这也是卡萝尔•莫莉拍摄这部记录片并制作游戏的目的。人，不能永远消失。他们的故事，应让世人知晓。”&lt;/p&gt;
&lt;p&gt;“‘我们的人性，由我们对待同胞的行为界定。’1961年诺贝尔文学奖得主伊沃•安德里奇写道。卡萝尔为乔伊丝留下一部电影，玛格丽特为乔伊丝留下一个网站。而更多的人，从这个世界消失，没人悼念他们，没人为他们感到抱歉，甚至没人知道他们曾经存在过。今时今日，我们又能为他们做些什么?”&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Mon, 01 Jun 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2015-06-01:/64.html</guid><category>64</category></item><item><title>我的硬盘不可能这么空~aria2篇</title><link>https://blog.chih.me/download-use-aria2.html</link><description>&lt;p&gt;对于单纯的Aria2程序来说，它是一个轻量级、支持多种协议的命令行下载工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持的协议包括HTTP(S), FTP, BitTorrent, Metalink&lt;/li&gt;
&lt;li&gt;aria2可以并发的进行下载，并尝试将下载带宽利用率最大化&lt;/li&gt;
&lt;li&gt;分片与续传，自动中止并替换慢的线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看到命令行可能有人会想:“恩，又是那种强大到用起来要查手册写命令的玩意”。其实不然，由于aria2 支持 JSON-RPC和XML-RPC远程调用，可以通过web前端或客户端方便地进行管理。&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;在Linux下，可以很方便地通过包管理进行安装，比如Arch Linux&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pacman -S aria2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是Windows，可以下载编译好的二进制文件，放在&lt;code&gt;C:\WINDOWS\system32&lt;/code&gt;目录下，就可以通过&lt;code&gt;aria2c&lt;/code&gt;命令执行程序了&lt;/p&gt;
&lt;p&gt;可以直接运行命令进行下载:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTTP下载&lt;/p&gt;
&lt;p&gt;$ aria2c http://example.org/test.bin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从两个源同时下载&lt;/p&gt;
&lt;p&gt;$ aria2c http …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Tue, 31 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2015-03-31:/download-use-aria2.html</guid><category>linux</category><category>下载</category><category>aria2</category><category>systemd</category></item><item><title>Arch Linux 修复grub2 引导过程中的花屏</title><link>https://blog.chih.me/fixbug-grub2-in-archlinux.html</link><description>&lt;p&gt;前几天 &lt;code&gt;opensuse 13.2&lt;/code&gt; 被我强关了几次，结果用 &lt;code&gt;XFS&lt;/code&gt; 挂载的 &lt;code&gt;/home&lt;/code&gt; 每次都丢文件， 这样实在是让人难以安心，再加上opensuse 的一些操作始终感觉有些麻烦，官方仓库的软件也少。种种不便之处， 让我想起以前用 &lt;code&gt;Arch Linux&lt;/code&gt;时的舒心，于是备份重装。所有的文件系统用了 &lt;code&gt;Ext4&lt;/code&gt;(opensuse 上的&lt;code&gt;Btrfs&lt;/code&gt;的确先进，但很多功能我也没怎么去用)。&lt;/p&gt;
&lt;p&gt;​&lt;code&gt;Arch Linux&lt;/code&gt;的安装过程先略去不表。安装基本系统和&lt;code&gt;KDE&lt;/code&gt;都没有发现问题，但安装完基本系统重启的时候就发现有个小问题了喵。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;从BIOS自检完成到桌面启动直接的那段过程中屏幕一直都是花的，就是那种黑白电视机雪花屏的样子。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这只是一个小问题，反正进入桌面之后就没影响了，但对于强迫症患者真是太难受了啊! 于是去Google找解决方案，翻了几页之后还真的被我找到类似的问题了—— &lt;a href="https://forum.suse.org.cn/viewtopic.php?f=2&amp;amp;t=2365"&gt;https://forum.suse.org.cn/viewtopic.php?f=2 …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Sun, 15 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2015-03-15:/fixbug-grub2-in-archlinux.html</guid><category>linux</category><category>grub2</category></item><item><title>为MineCraft启动器挂上代理</title><link>https://blog.chih.me/socks-for-minecraft.html</link><description>&lt;p&gt;&lt;code&gt;MineCraft&lt;/code&gt;官方启动器在启动的时候会从以下地址获取更新:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://s3.amazonaws.com/Minecraft.Download/launcher/launcher.pack.lzma
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如你所见，用的是Amazon EC2，Amazon AWS云服务，这两个服务在国内都是部分被屏蔽的。&lt;/p&gt;
&lt;p&gt;但是如果你有shadowsocks等socks代理的话是可以给&lt;code&gt;MineCraft&lt;/code&gt;挂上代理的，虽然官方启动器并未提供代理设置。&lt;/p&gt;
&lt;p&gt;我在这里用的是&lt;code&gt;java&lt;/code&gt;提供的代理选项:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ java -DsocksProxyHost&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 -DsocksProxyPort&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1080&lt;/span&gt; -jar ~/.minecraft/Minecraft.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样子打开&lt;code&gt;MineCraft&lt;/code&gt;启动器就可以很快的登录、更新、下游戏了。但需要注意的是你通过启动器打开&lt;code&gt;Minecraft&lt;/code&gt;游戏本体之后，游戏是不走代理的。&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Sat, 14 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2015-03-14:/socks-for-minecraft.html</guid><category>linux</category><category>Java</category><category>Minecraft</category><category>shadowsocks</category><category>代理</category></item><item><title>在openSUSE上编译WizNote(为知笔记)</title><link>https://blog.chih.me/Compiler-WizNote-in-openSUSE.html</link><description>&lt;p&gt;&lt;code&gt;Wiznote&lt;/code&gt;--为知笔记是一款优秀的全平台云笔记客户端，当初我从Windows切换到纯Linux平台的时候，就同时把我的在线笔记从&lt;code&gt;Evernote&lt;/code&gt;切换到了&lt;code&gt;WizNote&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;openSUSE&lt;/code&gt;的个人仓库里其实是有&lt;code&gt;WizNote&lt;/code&gt;的
&lt;a href="https://build.opensuse.org/package/show?project=home%3Agmg137&amp;amp;package=WizNote"&gt;https://build.opensuse.org/package/show?project=home%3Agmg137&amp;amp;package=WizNote&lt;/a&gt;， 但它并不是最新版本。所以我打算自己编译一个最新版自用，同时因为是自用，直接源码编译安装了，并没有打包。如果需要在&lt;code&gt;openSUSE&lt;/code&gt;下打包，可以参照苏姐的视频教学&lt;a href="http://www.bilibili.com/video/av688454"&gt;http://www.bilibili.com/video/av688454&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;获取源码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从github 上面 clone 为知笔记客户端源码到本地&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/WizTeam/WizQTClient.git …&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Wed, 11 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2015-03-11:/Compiler-WizNote-in-openSUSE.html</guid><category>linux</category><category>Qt5</category><category>openSUSE</category><category>编译</category><category>WizNote</category></item><item><title>解决在opensuse下virtualbox无法挂载主机USB设备的问题</title><link>https://blog.chih.me/use-USB-in-virtualbox-at-openSUSE.html</link><description>&lt;p&gt;因为要用&lt;code&gt;virtualbox&lt;/code&gt;中的&lt;code&gt;Windows&lt;/code&gt;虚拟机设置G602的可编程键，所以需要把G602的USB无线接收器挂载到虚拟机上，结果发现&lt;code&gt;virtualbox&lt;/code&gt;右下角USB设备那里尽管有&lt;code&gt;logitech USB Receiver&lt;/code&gt;这个选项，但它是灰色的，无法选中。&lt;/p&gt;
&lt;p&gt;因为已经确认当前用户已经加入&lt;code&gt;vboxusers&lt;/code&gt;组、并已经安装&lt;code&gt;Oracle Extensions&lt;/code&gt;扩展包，那么问题应该从其他方向寻找。&lt;/p&gt;
&lt;p&gt;在Google了一段时间后，终于在openSUSE论坛找到了&lt;a href="https://forum.suse.org.cn/viewtopic.php?f=13&amp;amp;t=3130"&gt;解决方法&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;源中的包，/usr/lib/udev/rules.d/60-vboxdrv.rules 里面有 4 行规则被用 # 号注释掉了，有安全隐患。把那 4 行注释打开应该就可以了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;找到那四行并取消注释就可以了:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;SUBSYSTEM=="usb_device", ACTION=="add", RUN+="/usr/share …&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Mon, 02 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2015-03-02:/use-USB-in-virtualbox-at-openSUSE.html</guid><category>linux</category><category>virtualbox</category><category>openSUSE</category><category>USB</category></item><item><title>在实时计算框架Storm集群上运行Storm-Starter例子</title><link>https://blog.chih.me/storm-starter.html</link><description>&lt;blockquote&gt;
&lt;p&gt;官方文档待翻译，个人实践在下面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Example Storm Topologies&lt;/h1&gt;
&lt;p&gt;Learn to use Storm!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Table of Contents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#maven"&gt;Using storm-starter with Maven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#intellij-idea"&gt;Using storm-starter with IntelliJ IDEA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name="getting-started"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Getting started&lt;/h1&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;First, you need &lt;code&gt;java&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; installed and in your user's &lt;code&gt;PATH&lt;/code&gt;.  Also, two of the examples in storm-starter
require Python and Ruby.&lt;/p&gt;
&lt;p&gt;Next …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Sun, 22 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2015-02-22:/storm-starter.html</guid><category>linux</category><category>Storm</category><category>大数据</category><category>实时计算</category></item><item><title>实时计算框架Storm集群搭建</title><link>https://blog.chih.me/Setting-up-a-Storm-Cluster-in-3-machines.html</link><description>&lt;h3&gt;首先对三台ubuntu14.04进行任务分配:&lt;/h3&gt;
&lt;p&gt;&lt;img alt="4-1" src="https://blog.chih.me/images/4-1.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nimbus：
ip：192.168.56.102&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zookeeper：
ip：192.168.56.102；192.168.56.103；192.168.56.104&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;supervisor：
ip：192.168.56.103 192.168.56.104&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此三台虚拟机分别用作Storm集群中的&lt;code&gt;nimbus&lt;/code&gt;节点、&lt;code&gt;Zookeeper&lt;/code&gt;集群（一台机器开多个zookeeper进程，当然也可以多台机器）、&lt;code&gt;supervisor&lt;/code&gt;节点。&lt;/p&gt;
&lt;p&gt;在这里我为方便起见 直接从单机安装的virtualbox虚拟机clone了三台一样的机器进行配置，每台上的配置过程见&lt;a href="https://blog.chih.me/Setting-up-a-Storm-Cluster.html"&gt;实时计算框架Storm本地模式搭建&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;下面针对每一个节点进行具体的配置&lt;/h3&gt;
&lt;p&gt;&lt;img alt="4-2" src="https://blog.chih.me/images/4-2.png"&gt;&lt;/p&gt;
&lt;h4&gt;搭建一个Zookeeper集群&lt;/h4&gt;
&lt;p&gt;三台机器同时作为&lt;code&gt;zookeeper&lt;/code&gt;集群 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Fri, 20 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2015-02-20:/Setting-up-a-Storm-Cluster-in-3-machines.html</guid><category>linux</category><category>Storm</category><category>大数据</category><category>实时计算</category></item><item><title>实时计算框架Storm本地模式搭建</title><link>https://blog.chih.me/Setting-up-a-Storm-Cluster.html</link><description>&lt;blockquote&gt;
&lt;p&gt;平台：Ubuntu14.04&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;安装依赖&lt;/h2&gt;
&lt;p&gt;通过ubuntu自带的软件包管理器安装java环境。
安装Java：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install openjdk-7-jdk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;检查是否安装完成:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ java -version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1-1" src="https://blog.chih.me/images/1-1.png"&gt;&lt;/p&gt;
&lt;p&gt;检查python版本:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -V
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1-2" src="https://blog.chih.me/images/1-2.png"&gt;&lt;/p&gt;
&lt;h2&gt;安装ZooKeeper&lt;/h2&gt;
&lt;p&gt;为了避免每次获取超级权限重复输入sudo
临时进入超级用户:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo -s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用&lt;code&gt;ctrl+d&lt;/code&gt;退出&lt;/p&gt;
&lt;p&gt;定位目录:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# cd /usr/local/src
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从阿里的源下载:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# wget http://mirrors.aliyun.com/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1-3" src="https://blog.chih.me/images/1-3.png"&gt;&lt;/p&gt;
&lt;p&gt;使用命令解压:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# tar -xzvf zookeeper-3 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Mon, 02 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2015-02-02:/Setting-up-a-Storm-Cluster.html</guid><category>linux</category><category>Storm</category><category>大数据</category><category>实时计算</category></item><item><title>ubuntu突然出现打开系统设置慢 sudo时出现无法解析主机的解决办法</title><link>https://blog.chih.me/ubuntutu-ran-chu-xian-da-kai-xi-tong-she-zhi-man-sudoshi-chu-xian-wu-fa-jie-xi-zhu-ji-de-jie-jue-ban-fa.html</link><description>&lt;p&gt;突然间发现我的&lt;code&gt;ubuntu12.04&lt;/code&gt;打开系统设置变得非常慢，正不知如何解决的时候。发现sudo时出现“无法解析的主机 XXXX" 的提示。马上就联想到不久前改过hosts，原来是主机名无法解析了，这样问题就好解决了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vim /etc/hosts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加入以下行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1       （你现在的主机名）
127.0.1.1       （你现在的主机名）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后 打开系统设置就非常快了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Sun, 06 Apr 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2014-04-06:/ubuntutu-ran-chu-xian-da-kai-xi-tong-she-zhi-man-sudoshi-chu-xian-wu-fa-jie-xi-zhu-ji-de-jie-jue-ban-fa.html</guid><category>Hosts</category><category>ubuntu</category><category>linux</category></item><item><title>virtualbox主机访问虚拟机</title><link>https://blog.chih.me/virtualboxzhu-ji-fang-wen-xu-ni-ji.html</link><description>&lt;p&gt;在&lt;code&gt;virtualbox&lt;/code&gt;中，如果选择默认的网卡设置，也就是网络地址转换(NAT)，是不能让宿主机访问到虚拟机的，如果想让两者相互连通，可以在保留默认的&lt;code&gt;NAT&lt;/code&gt;网卡的基础上增加一张&lt;code&gt;Host-Only&lt;/code&gt;的网卡。&lt;/p&gt;
&lt;p&gt;&lt;img alt="NAT" src="https://blog.chih.me/images/58081e7f-677a-47f9-8fc5-a7ec0435e7b1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Host-Only" src="https://blog.chih.me/images/7695d614d15ad02edfd564e4b32810fc.png"&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，如果你的宿主机是Linux的话，安装virtualbox后是没有一张Host-Only的网卡的，你需要在virtualbox的设置里添加这张网卡。&lt;/p&gt;
&lt;p&gt;&lt;img alt="add-Host-Only" src="https://blog.chih.me/images/snapshot2.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">chih</dc:creator><pubDate>Sun, 02 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.chih.me,2014-03-02:/virtualboxzhu-ji-fang-wen-xu-ni-ji.html</guid><category>Hosts</category><category>virtualbox</category><category>linux</category><category>网络</category></item></channel></rss>